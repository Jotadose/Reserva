/**
 * Script para verificar problemas de cach√© y sincronizaci√≥n en producci√≥n
 * Este script debe ejecutarse despu√©s de un despliegue para asegurar que los cambios
 * sean visibles inmediatamente y no haya problemas de cach√©.
 */

// Funciones para colorear la salida sin dependencias externas
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

const chalk = {
  green: (text) => `${colors.green}${text}${colors.reset}`,
  blue: (text) => `${colors.blue}${text}${colors.reset}`,
  yellow: (text) => `${colors.yellow}${text}${colors.reset}`,
  red: (text) => `${colors.red}${text}${colors.reset}`,
  cyan: (text) => `${colors.cyan}${text}${colors.reset}`,
  bold: {
    green: (text) => `${colors.bold}${colors.green}${text}${colors.reset}`,
    blue: (text) => `${colors.bold}${colors.blue}${text}${colors.reset}`,
    yellow: (text) => `${colors.bold}${colors.yellow}${text}${colors.reset}`,
    red: (text) => `${colors.bold}${colors.red}${text}${colors.reset}`,
    cyan: (text) => `${colors.bold}${colors.cyan}${text}${colors.reset}`
  }
};

// Funci√≥n simple para hacer peticiones HTTP
async function fetchUrl(url, options = {}) {
  try {
    const https = require('https');
    const http = require('http');
    
    return new Promise((resolve, reject) => {
      const client = url.startsWith('https') ? https : http;
      const request = client.get(url, (response) => {
        let data = '';
        response.on('data', (chunk) => {
          data += chunk;
        });
        response.on('end', () => {
          resolve({
            status: response.statusCode,
            data,
            headers: response.headers
          });
        });
      });
      
      request.on('error', (err) => {
        reject(err);
      });
      
      request.end();
    });
  } catch (error) {
    console.error(`Error al hacer fetch a ${url}:`, error);
    throw error;
  }
}

// Funci√≥n para hacer peticiones HTTP con m√°s opciones
async function makeRequest(url, options = {}) {
  try {
    const https = require('https');
    const http = require('http');
    
    return new Promise((resolve, reject) => {
      const client = url.startsWith('https') ? https : http;
      
      const reqOptions = new URL(url);
      if (options.headers) {
        reqOptions.headers = options.headers;
      }
      if (options.method) {
        reqOptions.method = options.method;
      }
      
      const request = client.request(reqOptions, (response) => {
        let data = '';
        response.on('data', (chunk) => {
          data += chunk;
        });
        response.on('end', () => {
          resolve({
            status: response.statusCode,
            data,
            headers: response.headers
          });
        });
      });
      
      request.on('error', (err) => {
        reject(err);
      });
      
      if (options.body) {
        request.write(JSON.stringify(options.body));
      }
      
      request.end();
    });
  } catch (error) {
    console.error(`Error al hacer request a ${url}:`, error);
    throw error;
  }
}

// URL base de producci√≥n - actualizar seg√∫n corresponda
const PRODUCTION_URL =
  process.env.PRODUCTION_URL || "https://tu-app-en-produccion.vercel.app";
const API_URL = `${PRODUCTION_URL}/api`;

/**
 * Verifica que los cambios en el frontend sean visibles inmediatamente
 * Compara respuestas con y sin par√°metros anti-cach√©
 */
async function verificarCacheFrontend() {
  console.log(chalk.blue("üîç Verificando cach√© del frontend..."));

  try {
    // Petici√≥n normal
    const respuestaNormal = await fetchUrl(PRODUCTION_URL);

    // Petici√≥n con par√°metro anti-cach√©
    const respuestaAntiCache = await fetchUrl(
      `${PRODUCTION_URL}?t=${Date.now()}`
    );

    // Verificar si las respuestas son id√©nticas (deber√≠an serlo si no hay cach√©)
    const sonIdenticas = respuestaNormal.data === respuestaAntiCache.data;

    if (sonIdenticas) {
      console.log(
        chalk.green(
          "‚úÖ El frontend no tiene problemas de cach√©. Los cambios son visibles inmediatamente."
        )
      );
    } else {
      console.log(
        chalk.red(
          "‚ùå Posible problema de cach√© en el frontend. Las respuestas con y sin par√°metro anti-cach√© son diferentes."
        )
      );
      console.log(
        chalk.yellow(
          "   Recomendaci√≥n: Verifica la configuraci√≥n de cach√© en vercel.json y los encabezados de respuesta."
        )
      );
    }

    // Verificar encabezados de cach√©
    console.log(chalk.blue("üìã Encabezados de cach√© del frontend:"));
    console.log(
      `   Cache-Control: ${
        respuestaNormal.headers["cache-control"] || "No definido"
      }`
    );
    console.log(`   ETag: ${respuestaNormal.headers["etag"] || "No definido"}`);
    console.log(
      `   Last-Modified: ${
        respuestaNormal.headers["last-modified"] || "No definido"
      }`
    );
  } catch (error) {
    console.error(
      chalk.red(`‚ùå Error al verificar cach√© del frontend: ${error.message}`)
    );
  }
}

/**
 * Verifica que la API responda correctamente y sin cach√©
 */
async function verificarCacheAPI() {
  console.log(chalk.blue("\nüîç Verificando cach√© de la API..."));

  try {
    // Verificar endpoint de salud
    const respuestaSalud = await fetchUrl(`${API_URL}/health`);
    console.log(
      chalk.green(
        `‚úÖ API health check: ${respuestaSalud.status}`
      )
    );

    // Verificar encabezados de cach√© de la API
    console.log(chalk.blue("üìã Encabezados de cach√© de la API:"));
    console.log(
      `   Cache-Control: ${
        respuestaSalud.headers["cache-control"] || "No definido"
      }`
    );

    // Verificar que la API tenga los encabezados correctos para evitar cach√©
    const tieneNoCache =
      respuestaSalud.headers["cache-control"] &&
      (respuestaSalud.headers["cache-control"].includes("no-cache") ||
        respuestaSalud.headers["cache-control"].includes("no-store"));

    if (tieneNoCache) {
      console.log(
        chalk.green("‚úÖ La API tiene configuraci√≥n correcta para evitar cach√©.")
      );
    } else {
      console.log(
        chalk.yellow(
          "‚ö†Ô∏è La API podr√≠a no tener configuraci√≥n √≥ptima para evitar cach√©."
        )
      );
      console.log(
        chalk.yellow(
          "   Recomendaci√≥n: Aseg√∫rate de que los endpoints de la API incluyan encabezados no-cache."
        )
      );
    }
  } catch (error) {
    console.error(
      chalk.red(`‚ùå Error al verificar cach√© de la API: ${error.message}`)
    );
  }
}

/**
 * Prueba de sincronizaci√≥n: crea una reserva y verifica inmediatamente la disponibilidad
 * para asegurar que los cambios se reflejen sin retraso
 */
async function probarSincronizacion() {
  console.log(chalk.blue("\nüîÑ Probando sincronizaci√≥n de datos..."));

  try {
    // Obtener fecha actual en formato YYYY-MM-DD
    const hoy = new Date().toISOString().split("T")[0];

    // Verificar disponibilidad inicial
    const disponibilidadInicial = await fetchUrl(
      `${API_URL}/availability?date=${hoy}`
    );
    console.log(
      chalk.green("‚úÖ Disponibilidad inicial obtenida correctamente.")
    );

    // Si hay horarios disponibles, crear una reserva de prueba
    if (disponibilidadInicial.data && disponibilidadInicial.data.length > 0) {
      const horarioDisponible = disponibilidadInicial.data[0];
      console.log(
        chalk.blue(`   Creando reserva de prueba para ${horarioDisponible}...`)
      );

      // Crear reserva de prueba
      const reservaPrueba = {
        name: "Test Sincronizaci√≥n",
        email: "test@example.com",
        phone: "123456789",
        date: hoy,
        time: horarioDisponible,
        duration: 45,
        service_id: 1,
      };

      await makeRequest(`${API_URL}/bookings`, {
        method: 'POST',
        body: reservaPrueba,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      console.log(chalk.green("‚úÖ Reserva de prueba creada correctamente."));

      // Verificar disponibilidad inmediatamente despu√©s
      const disponibilidadDespues = await fetchUrl(
        `${API_URL}/availability?date=${hoy}`
      );

      // Verificar que el horario reservado ya no est√© disponible
      const horarioSigueDisponible =
        disponibilidadDespues.data.includes(horarioDisponible);

      if (!horarioSigueDisponible) {
        console.log(
          chalk.green(
            "‚úÖ Sincronizaci√≥n correcta: el horario reservado ya no aparece como disponible."
          )
        );
      } else {
        console.log(
          chalk.red(
            "‚ùå Problema de sincronizaci√≥n: el horario reservado sigue apareciendo como disponible."
          )
        );
        console.log(
          chalk.yellow(
            "   Recomendaci√≥n: Verifica la l√≥gica de actualizaci√≥n de disponibilidad y aseg√∫rate de que no haya cach√©."
          )
        );
      }
    } else {
      console.log(
        chalk.yellow(
          "‚ö†Ô∏è No hay horarios disponibles para probar la sincronizaci√≥n."
        )
      );
    }
  } catch (error) {
    console.error(
      chalk.red(`‚ùå Error al probar sincronizaci√≥n: ${error.message}`)
    );
  }
}

/**
 * Funci√≥n principal que ejecuta todas las verificaciones
 */
async function main() {
  console.log(
    chalk.bold.green(
      "=== VERIFICACI√ìN DE CACH√â Y SINCRONIZACI√ìN EN PRODUCCI√ìN ==="
    )
  );
  console.log(chalk.cyan(`URL de producci√≥n: ${PRODUCTION_URL}`));
  console.log(chalk.cyan(`URL de API: ${API_URL}`));
  console.log(chalk.cyan("Fecha y hora: " + new Date().toLocaleString()));
  console.log(
    chalk.cyan("=========================================================\n")
  );

  try {
    // Ejecutar todas las verificaciones
    await verificarCacheFrontend();
    await verificarCacheAPI();
    await probarSincronizacion();

    console.log(chalk.bold.green("\n‚úÖ Verificaci√≥n completada."));
    console.log(chalk.cyan("Recomendaciones generales:"));
    console.log(
      chalk.cyan(
        "1. Si encontraste problemas de cach√©, verifica la configuraci√≥n en vercel.json"
      )
    );
    console.log(
      chalk.cyan(
        "2. Para problemas de sincronizaci√≥n, revisa la l√≥gica de actualizaci√≥n de disponibilidad"
      )
    );
    console.log(
      chalk.cyan(
        "3. Considera implementar un sistema de invalidaci√≥n de cach√© para cambios cr√≠ticos"
      )
    );
  } catch (error) {
    console.error(chalk.bold.red("\n‚ùå Error durante la verificaci√≥n:"));
    console.error(error);
    process.exit(1);
  }
}

// Ejecutar el script
main();
